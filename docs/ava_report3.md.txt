
## AVA

### Table of contents  

**[Cover Page](#coverpage)**

**[Contribution Breakdown](#breakdown)**

**[Summary Of Changes](#changes)**

**[Customer Statement of requirements](https://github.com/CSUS-CSC-131-Fall2017/ava/blob/master/docs/Customer%20Statement%20of%20Requirements.md#customer-statement-of-requirements)**

**[Requirements](#requirements)**

**[Glossary](#glossary)**

**[Functional Requirments](#functional)**

* [Stakeholders](#stakeholders)


* [Actors and Goals](#actor)
* [Use Cases](#usecase)
  * *[Casual description](#casualdescription)*
  * *[Fully dressed description](#fullydresseddescription)*
  * *[Use case diagram](#usecasediagram)*
  * *[Use case traceability matrix](#usecasetraceability)*
* [System Sequence Diagrams](#diagrams)

**[Non Functional requirements](#non_functional_requirements)**

**[Effort Estimation using Use Case Points](#effort)**

**[Domain Analysis](#domain_analysis)**

* [Domain Model](#domain_model)
  * *[Concept definition](#concept_definition)*
  * *[Association Definitions](association_definitions)*
  * *[Attribute Definitons](attribute_definitions)*
* [System Operation Contracts](#operation_contracts)
* [Mathematical model](#mathematical_model)

**[Interaction Diagrams](#interactionDiagram)**

**[Class Diagram](#classdiagram)**

- [Class Diagram](#classdiagram)
- [Data Types and Operation Signatures](#datatypesandstructures)

**[System Architecture & System Design](#systemdesign)**

- [Architectural Styles](#architecturalstyles)
- [Identifying Subsystems](#identifyingsystems)
- [Mapping Subsystems to Hardware](#hardwaremappings)
- [Persistent Data Storage](#datastorage)
- [Network Protocol](#networkprotocol)
- [Global Control Flow](#controlflow)
- [Hardware Requirements](#hardwarerequirements)

**[Algorithms & Data Structures](#algorithmsandstructures)**

- [Algorithms](#algorithms)
- [Data Structures](#datastructures)

**[User Interface design](#user_interface)**

* [Preliminary design](#preliminary_design)
* [User Effort estimation](#user_effort_estimation)

**[History of Work & Current Status of Implementation](#history_of_work)**

**[Conclusions & Future Work](#futurework)**

**[References](#references)**

## <a name ="coverpage"></a> Cover Page

**Course Title: CSC 131 Computer Software Engineering**

**Group: Team Friday**

**Project Title: AVA **

**URL of Project: **

**Team Members: Parker Martinez, Swapnil Patel, Angelica Smith-Evans, Anand Masurkar, **

##<a name="breakdown"></a>Contributions Breakdown

Since the development of this project will take many resources and can be code-heavy and takes a significant amount of analysis, the APIs have been broken up and divided amongst the team members. This is the breakdown of which team member is developing which API. As shown below, the team has broken up into two entities in order to split who develop front-end and back-end.

- Backend APIs:
  - Recipe Search: Swapnil
  - Authentication: Neha
  - Feedback: Vidhya
  - Pantry: Sruthi, Angelica
  - Registration: Anand
- Frontend: Parker, Swapnil, Anand



## <a name="changes"></a> Summary Of Changes

 Changes made from previous report.
 -

***

***

## <a name="requirements"></a> Customer Requirements                                  

| Requirements | Priority | Description                              |
| ------------ | :------: | ---------------------------------------- |
| REQ - 1      |    5     | Ava should be able to authenticate the user/register new users |
| REQ - 2      |    5     | Ava must let users add items to their pantry |
| REQ - 3      |    5     | Ava should be able to find a recipe      |
| REQ - 3a     |    5     | ...based on the ingredients              |
| REQ - 3b     |    4     | ...based on cuisine                      |
| REQ - 3c     |    3     | ...based on time-of-day                  |
| REQ - 4      |    3     | Ava will let users bookmark/save recipes |
| REQ - 5      |    2     | Ava will let users leave a review        |
| REQ - 5a     |    2     | ...by giving a rating (on a scale of 1-5), based on how much they liked it |
| REQ - 5b     |    2     | ...by giving a suggestion in text/comment |
| REQ - 6      |    1     | Ava will let users view recipe of the day and admin should be able to show recipe of the day to logged in users |
| REQ - 7      |    1     | Ava will let users share their recipes   |
| REQ - 8      |    1     | Ava analyzes recipes and provides related side dishes to make a full meal |
| REQ - 9      |    5     | Admin should be able to add or edit recipes and keep track of most viewed recipes |

## <a name="glossary"></a> Glossary

*Ava* : The system to be created; she will help a user as they navigate through the site.

*User* : Any person that uses the website to input ingredients to the pantry or searches for recipes based on the ingredients he/she has.

*Pantry* : A place to store all of the user's current ingredients; recipes will be found off of this information.

*Ingredients* : Edible items the user has in the pantry and the ones used to search for recipes.

*Admin* : A person who has deep access to the system, is capable of adding new recipes to the system; can view the user's pantry.

*Recipe of the Day* : Recommended recipe for the day by Ava.




## <a name="functionalrequirements"></a> Functional Requirements Specification

### 	<a name="stakeholders"></a> a. Stakeholders

Those who would be interested in use of the Ava web interface are those who are looking to find recipes based on ingredients they have at home, as well as those users who need inspiration for recipes to cook based on personal preference, such as cuisine origin. Non-users who would be interested in this are cooks who are interested in appending their own recipes to share to a mass audience, as well as sponsors who want to feature specific recipes for the recipe of the day. The administrative users will also have a interest in the system due to involvement in development and creative execution.

### 	<a name="actor"></a> b. Actors and Goals

#### User
- Able to sign in and create pantry

- Able to add their ingredients in the pantry

- Able to search recipes according to the category they want with the ingredients they have

#### Admin
- Able to manage the system
- Able to add new recipes to the system
- Able to view the homepage
- Able to view the user's pantry



  ​




### <a name="usecase"></a> c. Use Cases

#### <a name="casualdescription"></a> i. Casual Description


| Use Cases                    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Description                              |
| :--------------------------------------- | ---------------------------------------- |
| UC - 1&nbsp;                             | NewUserSignUp New User can sign up to 'Ava' application |
| UC - 2                                   | LoginUser Existing user can login to 'Ava' application |
| UC - 3                                   | SaveIngredients User can save ingredients in the pantry |
| UC - 4                                   | SearchRecipe User can search recipes based on the search filter |
| UC - 4a                                  | SearchFilter1 User should be able to search recipe using ingredients |
| UC - 4b                                  | SearchFilter2 User should be able to search recipe using cuisine |
| UC - 4c                                  | SearchFilter3 User should be able to search recipe based on time of the day |
| UC - 5                                   | GiveFeedback Existing users can give feedback for recipes |
| UC - 5a                                  | FeedbackOption1 Logged in users can provide rating on a scale of 1 to 5 |
| UC - 5b                                  | FeedbackOption2 Logged in users can provide suggestion in text for recipe |
| UC - 6                                   | ShareRecipe Users can share recipes on social media |
| UC - 7                                   | ViewRecipeOfTheDay Users can view recipe of the day |
| UC - 8                                   | AddRecipe Admin can add recipe           |
| UC - 9                                   | EditRecipe Admin can edit recipe         |
| UC -10                                   | DisplayRceipeOfTheDay Admin can show recipe of the day to logged in users |
| UC -11                                   | ManageAccount Ava should be able to manage specific user account by analyzing recipes and provide related side dishes and let users bookmark or save recipe |
| UC -12                                   | TrackMostViewed Admin should be able to track most viewed recipe |
#### <a name="fullydresseddescription"></a> ii. Fully-Dressed Description

##### UC1 - NewUserSignUp

Related Requirements: REQ - 1

Initiating Actor: User

Goal: User wants to get signed up for Ava application

Participating Actors: Ava

Pre conditions: None worth mentioning.

Post conditions: User is directed to the registration page in Ava 

Main Success Scenario:

    1. User opens the Ava application 

	2. User signs up by going to the registration page

	3. User submits the application and his/her account gets created

	4. Ava must be able to register new users
---



##### UC2 - LoginUser

Related Requirements: REQ - 1

Initiating Actor: User, Ava

Goal: Existing user can login to Ava application

Participating Actors: Database

Preconditions: User must already have an account in Ava 

PostConditions: User is authenticated and user can go through Ava application.

Main Success Scenario:
​	 
    1. User gets logged in to Ava

	2. Ava must be able to authenticate the already existing users

	3. Users can view the Ava application 
----

​	

##### UC3 - SaveIngredients

Related Requirements: REQ - 2

Initiating Actor: User, Ava

Goal: User can add/save items to their pantry 

Participating Actors: Database

Preconditions: New/Existing users can view various ingredients

PostConditions: User can view the ingredients which he/she has added to their pantry.

Main Success Scenario:

	1. New/Existing users can browse the Ava application 

	2. User goes to the pantry mode

	3. User is given list of ingredients 

	4. User makes a selection

	5. User can add/save ingredients to their pantry 
---

​	

##### UC4 - SearchRecipe

​	
Related Requirements: REQ - 3

Initiating Actor: User, Ava

Goal: User can search any recipe 

Participating Actors: Database

Preconditions: User can view the ingredients in their pantry

PostConditions: User can view the ingredients which he/she has added to their pantry

Main Success Scenario:

```markdown
	1. Ava should be able to find a recipe
```



---



##### UC - 4a SearchFilter1

Related Requirements: REQ - 3

Initiating Actor:User, Ava

Goal: User should be able to search recipe using ingredients

Participating Actors: Database

Preconditions:  The user must have food items available to them checked in the Pantry.

PostConditions: User can browse recipes on website with their criteria.

Main Success Scenario:

	1. User can search any recipe based on the ingredients




---



##### UC - 4b SearchFilter2

Related Requirements: REQ - 3

Initiating Actor:User, Ava

Goal: User should be able to search recipe using cuisine

Participating Actors: Database

Preconditions:  There is none worth mentioning.

PostConditions: Recipes will be listed based on their time of day keyword.

Main Success Scenario:

     1. User can search any recipe based on time of the day




---



##### UC - 4c SearchFilter3

Related Requirements: REQ - 3

Initiating Actor:User, Ava

Goal: User should be able to search recipe based on time of the day

Participating Actors: Database

Preconditions:  No notable precondition.

PostConditions: The recipe list will show recipes with the associated time of day keyword.

Main Success Scenario:

     1. User should be able to search recipe based on time of the day		




---



##### UC5 - GiveFeedback

Related Requirements: REQ - 5

Initiating Actor: User, Ava

Goal: User can give feedback for any recipe

Participating Actors: Database

Preconditions: User must already have an account in Ava 

PostConditions: User can view any recipe and give feedback 

Main Success Scenario:

	1. User logs in to Ava

	2. User goes to the pantry mode

	3. User can view any recipe

	4. User gives feedback/review for the same




---



##### UC - 5a FeedbackOption1

Related Requirements: REQ - 5

Initiating Actor:User, Ava

Goal: Logged in users can provide rating on a scale of 1 to 5

Participating Actors: Database

Preconditions: User must have an account in Ava  

PostConditions: Rating is provided by the user for the recipe he/she viewed

Main Success Scenario:

	1. User views a recipe in Ava

	2. User wants to provide feedback by giving rating

	3. User gives rating for the recipe




---



##### UC - 5b FeedbackOption2

Related Requirements: REQ - 5

Initiating Actor:User, Ava

Goal: Logged in users can provide suggestion in text for recipe

Participating Actors: Database

Preconditions: User must have an account in Ava  

PostConditions: Suggestion for a recipe is added

Main Success Scenario:

	1. User views a recipe in Ava

	2. User wants to add a suggestion for a recipe

	3. User provides suggestion by adding text	




---



##### UC6 - ShareRecipe

Related Requirements: REQ - 7

Initiating Actor: User, Ava

Goal: User can share their recipes 

Participating Actors: Database

Preconditions: User must already have an account in Ava 

PostConditions: User can view any recipe and share it with others 

Main Success Scenario:

	1. User logs in to Ava

	2. User goes to the pantry mode

	3. User can view any recipe

	4. User shares the recipe 




---



##### UC7 - ViewRecipeOfTheDay

Related Requirements: REQ - 6

Initiating Actor: User, Ava, Admin

Goal: User can view Recipe of the day

Participating Actors: Database

Preconditions: User must already have an account in Ava 

PostConditions: User can view Recipe of the day which the admin will show to the existing users

Main Success Scenario:

	1. User logs in to Ava

	2. Admin will show Recipe of the day to existing users

	3. Existing users can view Recipe of the day
---



##### UC8 - AddRecipe

Related Requirements: REQ - 9

Initiating Actor: Ava, Admin

Goal: Admin should be able to add any recipe 

Participating Actors: Database

Preconditions: NA

PostConditions: A new gets added in the Ava application

Main Success Scenario:

	1. Admin can add any recipe whenever required
---



##### UC9 - EditRecipe

Related Requirements: REQ - 9

Initiating Actor: Ava, Admin

Goal: Admin should be able to edit any recipe

Participating Actors: Database

Preconditions: Recipe must be available in Ava  

PostConditions: Admin can make changes in recipe by editing it

Main Success Scenario:

	1. Admin searches for the recipe where changes should be made

	2. Admin can edit the recipe
---



##### UC - 10 DisplayRecipeOfTheDay

Related Requirements: REQ - 6

Initiating Actor:User, Ava, Admin

Goal: Ava will let users view recipe of the day and admin should be able to show recipe of the day to logged in users

Participating Actors: Database

Preconditions: User must have an account in Ava 

PostConditions: Users would be able to view recipe of the day

Main Success Scenario:

	1. Admin adds the recipe of the day 

	2. Users having account in Ava will be able to view the recipe of the day
---



##### UC - 11 ManageAccount

Related Requirements: REQ - 4,REQ - 8

Initiating Actor: User, Ava, Admin

Goal: Ava should be able to manage specific user account by analyzing recipes and provide related side dishes and let users bookmark or save recipe

Participating Actors: Database

Preconditions:  User has verified account. 

PostConditions: Users would be able to view side dishes

Main Success Scenario:

	1. Ava analyzes user's recipe to manage specific user account

	2. Based on user's preferences,Ava provides related side dishes

	3. Ava allows users to bookmark or save recipe
---



##### UC - 12 TrackMostViewed

Related Requirements: REQ - 9

Initiating Actor: User, Ava, Admin

Goal: Admin should be able to add or edit recipes and keep track of most viewed recipes

Participating Actors: Database

Preconditions:  

PostConditions: Admin would know the most active users and less active users

Main Success Scenario:

	1. Admin analyzes users and keeps track of the most viewed recipe
---






#### 		<a name="usecasediagram"></a> iii. Use Case Diagram

![image](diagrams/use_case_diagram.jpg)



####			<a name="usecasetraceability"></a> iii. Use Case Traceability Matrix




|  Req  	| PW 	| UC1 	| UC2 	| UC3 	| UC4 	| UC5 	| UC6 	| UC7 	| UC8 	| UC9 	| UC10 	| UC11 	| UC12 	| UC13 	| UC14 	| UC15 	| UC16 	| UC17 	| UC18 	|
|:-----:	|:--:	|:---:	|:---:	|:---:	|:---:	|:---:	|:---:	|:---:	|:---:	|:---:	|:----:	|:----:	|:----:	|:----:	|:----:	|:----:	|:----:	|:----:	|:----:	|
|  REQ1 	|  5 	|  X  	|  X  	|     	|     	|     	|     	|     	|     	|     	|      	|   X  	|      	|      	|      	|      	|      	|      	|      	|
|  REQ2 	|  5 	|     	|     	|  X  	|     	|     	|     	|     	|     	|     	|      	|      	|      	|      	|      	|      	|      	|      	|      	|
|  REQ3 	|  5 	|     	|     	|     	|  X  	|     	|     	|     	|     	|     	|      	|      	|   X  	|   X  	|   X  	|      	|      	|      	|      	|
|  REQ4 	|  3 	|     	|     	|     	|     	|     	|     	|     	|     	|     	|      	|      	|      	|      	|      	|      	|      	|   X  	|      	|
|  REQ5 	|  2 	|     	|     	|     	|     	|  X  	|     	|     	|     	|     	|      	|      	|      	|      	|      	|   X  	|   X  	|      	|      	|
|  REQ6 	|  1 	|     	|     	|     	|     	|     	|     	|  X  	|     	|     	|   X  	|      	|      	|      	|      	|      	|      	|      	|      	|
|  REQ7 	|  1 	|     	|     	|     	|     	|     	|  X  	|     	|     	|     	|      	|      	|      	|      	|      	|      	|      	|      	|      	|
|  REQ8 	|  1 	|     	|     	|     	|     	|     	|     	|     	|     	|     	|      	|      	|      	|      	|      	|      	|      	|   X  	|      	|
|  REQ9 	|  5 	|     	|     	|     	|     	|     	|     	|     	|  X  	|  X  	|      	|      	|      	|      	|      	|      	|      	|      	|   X  	|

### <a name="diagrams"></a> d. System Sequence Diagrams

Login



![image](diagrams/Sequence_Diagram_for_Login.png)









Add ingredients to Pantry



![image](diagrams/Sequence_Diagram_Input_Ingredients.png)









Search



![image](diagrams/Sequence_Diagram_Search_Recipes_modified.png)





Admin login 



![image](diagrams/Sequence_Diagram_Admin_login.png)



## <a name="non_functional_requirements"></a> Nonfunctional Requirements

**Functionality** - The system shows varies recipes that the users can try with the ingredients they provide. Users are able to use the system without signing up but they won't be able to save their ingredients or recipe for future use. 

**Usability**- This is a simple and user-friendly site; therefore, we assume the user will have a basic understanding of computer processes. User interface will be easy to learn and easy to manage for user and administration. 

**Reliability**- A reliable system will need to be maintained in order for our users be able to use the site regularly, whenever they need to and the system will also need to be secure so our users feel safe inputting their information when making and submitting an account. In the event of failure, the system may be restarted. 

**Performance**- Based on either ingredients in the pantry or ingredients inputted by the user, the search results displayed should be recipes that are closely related to the specified ingredients available to the user. 


**Supportability**- The system will be maintain by the administration. The system will be extended when searching for a recipe; a recipe can be searched based on ingredients, time-of-day, or cuisine. The system will also be extended when allowing the user to give feedback; the user may give feedback through a comment or a rating. 

**Implementation**- We will be using Python as well as Django in order to build the website and use APIs to provide simpler writing and pulling from the backend database. There will be three databases which will hold user accounts, recipes, and also user pantry data.

**Interfaces**- The system will be easily readable in order for the non-admin Users to know as soon as accessing the main page what to do in order to use Ava.

**Operation**- The administration will manage the system by adding new recipes to the system, show recipe of the day to users, and track the most viewed recipe. 

**Packaging**- The user will not need to install the system, it will be available online to anyone who wants to make an account or simply just browse the site. 

**Legal**- As of right now, the system will not be licensed. There are no liability issues/royalties to discuss.

## <a name="effort"></a> Effort Estimation using Use Case Points



## <a name="domain_analysis"></a> Domain Analysis

### <a name="domain_model"></a> Domain Model

#### <a name="concept_definition"></a> i. Concept Definition

| Responsibility Description               | Type | Concept Name  |
| ---------------------------------------- | ---- | ------------- |
| R-01: Views which registered users are accessing website, views most accessed recipes, adds/deletes recipes, approves feedback, picks recipe of the day to be featured. | D    | Admin         |
| R-02: Adds ingredients to pantry, search recipes, must register to save ingredients. | D    | NewUser       |
| R-03: Adds ingredients to pantry, search recipes, edit personal account, adds feedback. | D    | ExistingUser  |
| R-04: System knows which recipes are in the database according to time of day, ingredients, and cuisine type. | K    | Recipe        |
| R-05: Change, add, or delete recipe from website. | D    | ModifyRecipe  |
| R-06: Users can search recipes based on ingredient, time of day, and cuisine type. | D    | SearchRecipe  |
| R-07: User will be able to add ingredient to their individual pantry. | D    | AddIngredient |
| R-08: Feedback will be added to recipe page. | D    | GetFeedback   |
| R-09: Daily recipe will be added by Admin to top of search results. | D    | DailyRecipe   |
| R-10: User shares recipe link to social media. | D    | ShareRecipe   |
| R-11:  System knows which ingredients user has. | K    | Ingredient    |
| R-12: System knows if a recipe will have feedback left by users. | K    | GetFeedback   |



#### <a name="association_definitions"></a> ii. Association Definitions
|Concept Pair | Association Description | Association Name|
|-------------|-------------------------|-----------------|
|User <-> Register| Allows users to register into the system | Registration|
|User <-> Login| Allows registered user to login into the system| Login|
|User <-> Pantry| Allows User to add and/or save ingredients, and also search for recipes| Convey Request/Request Save|



#### <a name="attribute_definitions"></a> iii. Attribute Definitions

| Concept      | Attribute&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | Attribute Desciption                     |
| ------------ | :--------------------------------------- | ---------------------------------------- |
| Admin        | 1. Name<br>           2. Privileges      | 1. Name: Name of Admin <br>2. Privileges: The admin has specific privileges which allows them to modify recipes, approve feedback left by Existing Users, and choose recipe of the day. |
| NewUser      | 1. Ingredients                           | 1.  Ingredients: Every user has a list of ingredients owned. |
| ExistingUser | 1. Name <br>2. Ingredients <br>3. Feedback Left | 1. Name: Name of User<br> 2. Ingredients: Every user has a list of ingredients owned. <br>3. Feedback left: Users may have a list of feedback given on recipes. |
| Recipe       | 1. Name <br>2. Time Association <br>3. Origin <br>4. Feedback <br>5. Ingredients | 1. Name: Every recipe will have a name.<br>2. Time Association: A recipe will be categorized by time of the day. <br>3. A recipe will also be categorized by country origin. <br>4. Feedback left by users. <br>5. A recipe will have a list of ingredients used. |
| ModifyRecipe | 1. Modifier <br> 2. Name of Item<br>3. Ingredients<br>4. Category | 1. The name of the Admin who modified this item<br>2. Allows to modify the name of the recipe. <br>3. Allows for Admin to modify ingredients of recipe.<br>4. Allows the Admin to modify the categories recipe belongs to. |
| SearchRecipe | 1. List Recipes                          | 1. List the recipes from the database based on criteria. |



## <a name="interactionDiagrams"></a> Interaction Diagrams

#### Use Case 1: Login

In order for users to log-in, the user will send an authentication request by logging in through the Ava front-end service. From there, the request will be verified through the database back-end. If successful, then the user may use various perks of being a user of this service.
![Sequence_Diagram_for_Login](diagrams/Sequence_Diagram_for_Login.png)

#### Use Case 2: Input Ingredients

Users may enter ingredients through the Ava chat box, which will be sent through to the back-end database. From there, the database will store this information and it will be represented to the user as ingredients in the "Pantry". 
![Sequence_Diagram_Input_Ingredients](diagrams/Sequence_Diagram_Input_Ingredients.png)

#### Use Case 3: Search Ingredients

Users will be able to search for recipes based on ingredients in the pantry, cultural origin of the cuisine, and time of day food is typically eaten. The request is sent through the Ava front-end chat box, then the queries are against the recipes in the database. From there, the most relevant recipe will be sent back to the front-end for viewing by the user.

![Sequence_Diagram_Search_Recipes_modified](diagrams/Sequence_Diagram_Search_Recipes_modified.png)



## <a name="classdiagram"></a> Class diagram

This is the planned implementation of the classes in Object-Oriented Programming  fashion. This implementation is meant to be both functional as well as efficient.

# ![image](diagrams/ava_class_diagram.png)



## <a name="systemdesign"></a> System Architecture and system design

#### <a name="architecturalstyles"></a>Architectural Styles



##### Client-server (Distributed application)

![architecture-1](diagrams/architecture-1.jpg)

The **client–server model** is a distributed application structure that partitions tasks or workloads between the providers of a resource or service, called servers, and service requesters, called clients. Often clients and servers communicate over a computer network on separate hardware, but both client and server may reside in the same system. A server host runs one or more server programs which share their resources with clients. A client does not share any of its resources, but requests a server's content or service function. Clients therefore initiate communication sessions with servers which await incoming requests.

##### Server-side internal architecture

![arch2](diagrams/arch2.jpg)



##### Major system services :

- User Authentication 

- User Pantry Management

- User Profile

- Recipe Search 

- Recipe Ratings and Feedback

  In general, a service is an abstraction of computer resources and a client does not have to be concerned with how the server performs while fulfilling the request and delivering the response. The client only has to understand the response based on the well-known application protocol, i.e. the content and the formatting of the data for the requested service.

#### <a name="identifyingsystems"></a>Identifying subsystems

##### Subsystems

- Front End
- Application Server
- Database

#### <a name="datastorage"></a>Data Storage

The system works with multiple storage strategies for different forms of data. For persistent data storage, the system uses *PostgreSQL*, an object-relational database management system (ORDBMS) with an emphasis on extensibility and standards compliance.  PostgreSQL is developed by the PostgreSQL Global Development Group, a diverse group of many companies and individual contributors. It is free and open-source, released under the terms of the PostgreSQL License, a permissive software license.

The major differences between conventional RDBMS services, MySQL and PostgreSQL are as below: 

###### **1. Partitioning**

MySQL and PostgreSQL differ significantly with respect to their partitioning methods, which determine how data is stored on different nodes of the database. MySQL uses a proprietary technology called MySQL Cluster to perform horizontal clustering, which consists of creating multiple clusters with a single cluster instance within each node. PostgreSQL doesn’t implement true partitioning, although it can provide a similar capability with table inheritance. This task involves using a separate sub-table to control each “partition.”

###### **2. Replication**

A database may use multiple methods to store redundant data across multiple nodes. MySQL uses master-master replication, in which each node can update the data. Both MySQL and PostgreSQL can perform master-slave replication, where one node controls the storage of data by the other nodes. PostgreSQL can also handle other types of replication with the implementation of third-party extensions.



#### <a name="networkprotocol"></a>Network Protocol

Clients and servers exchange messages in a request–response messaging pattern. The client sends a request, and the server returns a response. This exchange of messages is an example of inter-process communication. To communicate, the computers must have a common language, and they must follow rules so that both the client and the server know what to expect. The language and rules of communication are defined in a communications protocol. All client-server protocols operate in the application layer. The application layer protocol defines the basic patterns of the dialogue. To formalize the data exchange even further, the server implements an application programming interface (API). The API is an abstraction layer for accessing a service. By restricting communication to a specific content format, it facilitates parsing. By abstracting access, it facilitates cross-platform data exchange via HTTP. 



#### <a name="controlflow"></a>Global Control Flow

The global control flow shows how users will access the website, in a step-by-step diagram. The red lines show that the user has two separate options in this flow chart.

![activity](diagrams/activity.jpg)



#### <a name="hardwarerequirements"></a>Hardware Requirements

The Ava website will not require any high-end devices. It only will require a hardware with stable internet access. Therefore, system interaction will require:

- A client device which can access internet [personal computer, laptop, smartphone]
- Web Browser
- Internet Connection



## <a name="algorithmsandstructures"></a> Algorithms and Data Structures

#### <a name="algorithms"></a>Algorithms



##### Hamming distance algorithm for ingredients matching

All the ingredients are identified by unique id-weight. Each recipe has an  ingredient score based on the ingredients and keywords associated to it, such as time-of-day and cultural origin. 

To get list of recipes, hamming distance between the query ingredients or ingredients in the user pantry will be used to determine relative relevancy. 

 

#### <a name="datastructures"></a>Data Structures

Data structures used :

- Lists
- Dictionary (key, value pair)
- JSON objects
- Defined Objects (User, Pantry, Recipe, Feedback)

These were used with intention of flexibility in the design of AVA. AVA is meant to have multiple uses, as well as tend towards using object-oriented programming in order to be more efficient with resources. This also includes a small image which will act as the main logo of the Ava project.

### <a name="operation_contracts"></a> System Operation Contracts

| Operation      | NewUserSignUp                            |
| -------------- | ---------------------------------------- |
| Precondition   | N/A                                      |
| Post-condition | User is directed to the registration page in Ava |

| Operation      | LoginUser                                |
| -------------- | ---------------------------------------- |
| Precondition   | User must already have an account in Ava |
| Post-condition | User is authenticated and user can use Ava site |

| Operation      | SaveIngredients                          |
| -------------- | ---------------------------------------- |
| Precondition   | Users can view various ingredients       |
| Post-condition | Users can view ingredients that have been added to their panty |

| Operation      | SearchRecipe                             |
| -------------- | ---------------------------------------- |
| Precondition   | User has ingredients in their pantry     |
| Post-condition | User can find a recipe related to search criteria |

| Operation      | GiveFeedback                             |
| -------------- | ---------------------------------------- |
| Precondition   | User must have an account in Ava         |
| Post-condition | User can view any recipe and give feedback on that recipe |

| Operation      | ShareRecipe                              |
| -------------- | ---------------------------------------- |
| Precondition   | User must have an account in Ava         |
| Post-condition | User can view any recipe and share it with their friends |

| Operation      | ViewRecipeOfTheDay                       |
| -------------- | ---------------------------------------- |
| Precondition   | User must have an account in Ava         |
| Post-condition | User can view the recipe of the day (posted by admin) |

| Operation      | AddRecipe                    |
| -------------- | ---------------------------- |
| Precondition   | N/A                          |
| Post-condition | A new recipe is added to Ava |

| Operation      | EditRecipe                             |
| -------------- | -------------------------------------- |
| Precondition   | Recipe must be available in Ava        |
| Post-condition | Said recipe is edited by Administrator |

| Operation      | DisplayRecipeOfDay                       |
| -------------- | ---------------------------------------- |
| Precondition   | User must have an account in Ava         |
| Post-condition | User will be able to see the recipe of the day |

| Operation      | ManageAccount                            |
| -------------- | ---------------------------------------- |
| Precondition   | N/A                                      |
| Post-condition | Users would be able to view side dish suggestions |



### <a name="mathematical_model"></a> Mathematical Model



The search for the recipe will result in four suggestions (paginated in a carousal), the top being the most relevant result based on the user search. The recipes matching the search/ingredients must be therefore rated in order to sort and send back the most relevant results. 

The factors based on user search includes:

* Number of matching ingredients from pantry/search (m)
* Ingredients needed for the recipe (i)
* Ava rating (a)
* User rating (u)
  ​

**initial_search_score**(for a recipe) x = (m/i) +  ( a/10 * 0.75) + (u/10 * 0.25) 

Furthermore, particular to a recipe, the relevancy algorithm/formula will therefore work on these factors:

- Intensity of spices (s)

- Calories (c)

- Carbs content (b)

- Temperature (t)

- Meat content (m)

- Texture (t)

  ​

  For each of the recipe in the database, all the above mentioned factors will have a numerical value on the scale of 1 to 10. 

  ​

  **relevancy_score** (for a recipe) y = x * 0.90 + {  (0.5) ^ [(s + c + b + t + m + t) / 60] } * 0.1

  ​

## <a name="user_interface"></a> User Interface Design

### <a name="preliminary_design"></a> Preliminary Design

###### Home/Dashboard

![image](diagrams/home.jpg)

###### Login

![image](diagrams/login.jpg)

###### Register

![image](diagrams/register.jpg)

###### Pantry

![image](diagrams/pantry.jpg)

###### Recipe

![image](diagrams/recipe.jpg)



### <a name="user_effort_estimation"></a> User Effort Estimation

1. Home/Dashboard
   1. Click "menu icon"
   2. Click "Log on icon"
   3. Click "send" to talk with Ava
2. Login
   1. After entering in information, click "Log in"
3. Register
   1. If user does not have a current account, they click "register"
   2. After entering in information, click "sign up"
4. Pantry
   1. Click on the "pantry" icon to access pantry
   2. Click on the "item(s)" to add to each food group
5. Recipe
   1. After searching for recipe, click on "desired recipe" for more information about it

## <a name="history_of_work"></a> History of Work

![image](diagrams/ava_gantt_chart.JPG)



## <a name="futurework"></a> Conclusions & Future Work

When learning new languages, working with unfamiliar or new software, and in a group environment, it is normal to have some technical challenges along the way. Within our group, some technical challenges that we encountered were in the beginning of the semester, when most of the group was new to Git. There was only one person in the group who had some familiarity with Git before the course so, naturally, most of the group leaned on him when encountering problems with conflicts, merges, or general inquiries regarding commits. Another problem when dealing with GitHub was that half of the group had not had much experience with the command line, so one group member suggested we use the Git Desktop and most of the problems with conflicts and merges were resolved. Some other technical issues we had were with the other software the group decided to use to complete our project. Most of the group was new to JetBrains Pycharm as well as JetBrains DataGrip and Postman. We had some downloading errors that pushed us back in the beginning. We spent the first few weeks just trying to figure out how to correctly get the software installed, how we were going to use the software with our project, and implement our requirements using the software. One mistake that might have made our project run smoother would have been to choose a language that most of the group was familiar with, we decided to use Python as our project's main language and most of the group did not/ had not ever used it before.  

Over the span of this project, the group did struggle with the development of our software in ways that were outside technical issues. Knowing what we know now, it might have not been the wisest decision to have selected this amount of unknown software because the group was delayed on actual project development and we did spend  a lot of good working hours and group meet-ups trying to fix issues with the software instead of spending that time on the actual project. One problem that the group had with this project was with delegation. Our group elected that it was not necessary to have a project leader, which might have been a mistake because there was a lack of communication with some group members and a few times a couple people were working on the same thing, so work time was wasted. After the first demo, our group struggled with a way to make our site more friendly to users. It was pointed out that while our concept was good, there was nothing that made the user want to use our site because of the use case that the user may not know what they want and our site did not account for the case where the user does not know what to type into the search. 

At the beginning of the semester, when the group decided on the project we were going to implement throughout the class we had hopes of expanding it past what we were able to accomplish. For example, originally, our project was going in the direction of a type of conversational User Interface. We wanted to create something where customers could turn to, to use in their everyday life with things like checking the weather for the week or day, calculate, find a recipe based on your ingredients at home. Basically we wanted to create a type of search engine that didn't feel like a search engine; instead it would be more like a close friend who you can rely on and trust. The search experience would be more like a conversation between two people rather than a simple search request between human and machine and a person could switch between different modes depending on the type of experience they were seeking. For example, there would be a recipe mode where the main focus of the conversation would be regarding recipes and searching/adding ingredients. The group acknowledged that tackling this big of  project might be a little over our heads for the time restraints of the semester, so we decided to just focus on the recipe mode and if there was extra time to expand on to another mode. Specifically for the recipe mode aspect of the project, a possible future expansion we were thinking of implementing but were unable to accomplish was the idea of people being able to scan products directly into their pantry. This way when out shopping, the system would be extremely easy to use and update. Likewise, the possible directions for this project are limitless, which is why I believe our team was so attracted to this project: we could impact many people in many different and unique ways, the system would be personal and the experience would vary depending on who is using the system. In the future, this type of conversational UI might even develop past a simple website into external items and utilizing aspects and concepts from products like Google Home, Amazon Alexa, etc. 

## <a name="references"></a> References

**Marsic, Ivan. Software Engineering. Rutgers University, New Brunswick, New Jersey , 2012**



